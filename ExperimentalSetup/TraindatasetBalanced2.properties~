! Problem

problem = /media/DATA/datasets/NOx/TraindatasetBalanced2.txt
problem_type = SRFunction


! GP Operators

initialize_op = operator.TreeInitialize
selection_op = operator.CrowdedTournamentSelection
xover_op = operator.SinglePointKozaCrossover
mutate_op = operator.SubtreeMutate
! front_rank_method = euclidean
front_rank_method = first_fitness


! Fitness Functions

! fitness_op = fitness.SRFitness.Java
! fitness_op = fitness.SRFitness.Java, fitness.SubtreeComplexity
! fitness_op = fitness.SRFitness.Cpp, fitness.SubtreeComplexity
! fitness_op = fitness.SRFitness.Cuda, fitness.SubtreeComplexity
! fitness_op = fitness.SRFitness.CudaDual, fitness.SubtreeComplexity
! fitness_op = fitness.SRFitness.CudaCorrelation, fitness.SubtreeComplexity
! fitness_op = fitness.SRFitness.CudaCorrelationDual, fitness.SubtreeComplexity
fitness_op = fitness.SRFitness.CudaDual, fitness.SRFitness.CudaCorrelationDual, fitness.SubtreeComplexity


! GP parameters

pop_size = 1000
num_gens = 20

function_set = + - * mydivide exp mylog sqrt square cube quart sin cos
unary_function_set = exp mylog sqrt square cube quart sin cos
terminal_set = X1 X2 X3 X4 X5 X6 X7 X8 X9 X10 X11 X12 X13 X14 X15 X16 X17 X18

bin_width = 5
tree_initial_max_depth = 15
tourney_size = 10
xover_rate = 0.6
tree_xover_tries = 10
tree_xover_max_depth = 15
mutation_rate = 0.1
tree_mutate_max_depth = 15
! fitness pnorm
fitness_mean_pow = 2
! necessary if the output variable is discrete.
integer_fitness = false
